// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AuthorizedPaymentMethodTypeEnum string

const (
	AuthorizedPaymentMethodTypeEnumInvoice                  AuthorizedPaymentMethodTypeEnum = "invoice"
	AuthorizedPaymentMethodTypeEnumFixedAmount              AuthorizedPaymentMethodTypeEnum = "fixed_amount"
	AuthorizedPaymentMethodTypeEnumBaseAccount              AuthorizedPaymentMethodTypeEnum = "base_account"
	AuthorizedPaymentMethodTypeEnumDirectDebit              AuthorizedPaymentMethodTypeEnum = "direct_debit"
	AuthorizedPaymentMethodTypeEnumDirectBankTransfer       AuthorizedPaymentMethodTypeEnum = "direct_bank_transfer"
	AuthorizedPaymentMethodTypeEnumB2bInvoice               AuthorizedPaymentMethodTypeEnum = "b2b_invoice"
	AuthorizedPaymentMethodTypeEnumCard                     AuthorizedPaymentMethodTypeEnum = "card"
	AuthorizedPaymentMethodTypeEnumSliceItByCard            AuthorizedPaymentMethodTypeEnum = "slice_it_by_card"
	AuthorizedPaymentMethodTypeEnumPayLaterByCard           AuthorizedPaymentMethodTypeEnum = "pay_later_by_card"
	AuthorizedPaymentMethodTypeEnumPayByCard                AuthorizedPaymentMethodTypeEnum = "pay_by_card"
	AuthorizedPaymentMethodTypeEnumFixedSumCredit           AuthorizedPaymentMethodTypeEnum = "fixed_sum_credit"
	AuthorizedPaymentMethodTypeEnumAlternativePaymentMethod AuthorizedPaymentMethodTypeEnum = "alternative_payment_method"
)

func (e AuthorizedPaymentMethodTypeEnum) ToPointer() *AuthorizedPaymentMethodTypeEnum {
	return &e
}

func (e *AuthorizedPaymentMethodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invoice":
		fallthrough
	case "fixed_amount":
		fallthrough
	case "base_account":
		fallthrough
	case "direct_debit":
		fallthrough
	case "direct_bank_transfer":
		fallthrough
	case "b2b_invoice":
		fallthrough
	case "card":
		fallthrough
	case "slice_it_by_card":
		fallthrough
	case "pay_later_by_card":
		fallthrough
	case "pay_by_card":
		fallthrough
	case "fixed_sum_credit":
		fallthrough
	case "alternative_payment_method":
		*e = AuthorizedPaymentMethodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizedPaymentMethodTypeEnum: %s", s)
	}
}

type AuthorizedPaymentMethod struct {
	NumberOfDays         *int                            `json:"number_of_days,omitempty"`
	NumberOfInstallments *int                            `json:"number_of_installments,omitempty"`
	Type                 AuthorizedPaymentMethodTypeEnum `json:"type"`
}
