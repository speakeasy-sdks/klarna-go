// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package klarna

import (
	"context"
	"fmt"
	"github.com/speakeasy-sdks/klarna-go/v2/pkg/models/operations"
	"github.com/speakeasy-sdks/klarna-go/v2/pkg/utils"
	"net/http"
)

// authorizations - Operations related to authorizations
type authorizations struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newAuthorizations(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *authorizations {
	return &authorizations{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// Cancel - Cancel an existing authorization
// Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments wonâ€™t be used to place an order immediately you could release the authorization.
// Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
func (s *authorizations) Cancel(ctx context.Context, authorizationToken string) (*operations.CancelAuthorizationResponse, error) {
	request := operations.CancelAuthorizationRequest{
		AuthorizationToken: authorizationToken,
	}

	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/payments/v1/authorizations/{authorizationToken}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CancelAuthorizationResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
	}

	return res, nil
}
